import numpy as np

from pyspextool import config as setup
from pyspextool.extract import config as extract
from pyspextool.io.check import check_parameter
from pyspextool.io.files import extract_filestring
from pyspextool.plot.plot_profiles import plot_profiles


def select_orders(include=None, exclude=None, include_all=False, verbose=None,
                  qa_show=None, qa_write=None, qa_showsize=(6, 10)):
    """
    To set which orders are to be traced and extracted

    Parameters
    ----------
    include : int, list, str, optional
        If the type is int, the single order to include.
        If the type is list, a list of integer orders to include.
        If the type is str, a str giving the orders, e.g. '1-3,4,5'.

    exclude : int, list, str, optional
        If the type is int, the single order to include.
        If the type is list, a list of integer orders to include.
        If the type is str, a str giving the orders, e.g. '1-3,4,5'.

    include_all : {False, True}, optional
        Set to include all orders.

    qa_show : {None, True, False}, optional
        Set to True/False to override config.state['qa_show'] in the
        pyspextool config file.  If set to True, quality assurance
        plots will be interactively generated.

    qa_showsize : tuple, default=(6,6)
        A (2,) tuple giving the plot size that is passed to matplotlib as,
        pl.figure(figsize=(qa_showsize)) for the interactive plot.

    qa_write : {None, True, False}, optional
        Set to True/False to override config.state['qa_write'] in the
        pyspextool config file.  If set to True, quality assurance
        plots will be written to disk.

    verbose : {None, True, False}, optional
        Set to True/False to override config.state['verbose'] in the
        pyspextool config file.

    Returns
    -------
    None
    Updates the config.extract['xsdoorders'] or config.extract['psdoorders'] 
    variable, updates the QA plot generated by locate_aperture_positions, 
    and reruns the trace_apertures() function if 
    config.extract['exttype'] = 'xs'.

    Examples
    --------
    select_orders(include=3)
    select_orders(include=[3, 4])
    select_orders(include='3-4,7-9')
    select_orders(exclude=3)
    select_orders(exclude=[3, 4])
    select_orders(exclude='3-4,7-9')

    """

    #
    # Check if we can proceed
    #

    if extract.state['apertures_done'] is False:

        message = "extract.state['apertures_done']=False.  "+\
          "Previous steps not complete."        
        raise ValueError(message)        

    #
    # Check parameters
    #

    check_parameter('select_orders', 'include', include,
                    ['NoneType', 'int', 'list', 'str'])

    check_parameter('select_orders', 'exclude', exclude,
                    ['NoneType', 'int', 'list', 'str'])

    check_parameter('select_orders', 'include_all', include_all, 'bool')

    check_parameter('select_orders', 'qa_show', qa_show,
                    ['NoneType', 'bool'])

    check_parameter('select_orders', 'qa_write', qa_write,
                    ['NoneType', 'bool'])

    check_parameter('select_orders', 'qa_showsize', qa_showsize, 'tuple')

    check_parameter('select_orders', 'verbose', verbose, ['NoneType', 'bool'])

    #
    # Ensure only one optional argument is passed
    #

    if include is not None and exclude is not None:
        message = 'Cannot use both parameters `include` and `remove`.'
        raise ValueError(message)

    #
    # Check the qa and verbose variables and set to system default if need be.
    #

    if qa_write is None:
        qa_write = setup.state['qa_write']

    if qa_show is None:
        qa_show = setup.state['qa_show']

    if verbose is None:
        verbose = setup.state['verbose']

        #
    # Store the user inputs
    #

    extract.orders['include'] = include
    extract.orders['exclude'] = exclude
    extract.orders['include_all'] = include_all
    extract.orders['qaplot'] = qa_show
    extract.orders['qafile'] = qa_write
    extract.orders['qaplotsize'] = qa_showsize
    extract.orders['verbose'] = verbose

    #
    # Update command line if requested.
    #
    if verbose is True:
        print('Updating order selection...')

    #
    # Do the checks
    #

    if include is not None:

        if isinstance(include, int) is True:
            include = np.array(include, dtype=int)

        if isinstance(include, list) is True:
            include = np.array(include, dtype=int)

        if isinstance(include, str) is True:
            include = np.array(extract_filestring(include, 'index'), dtype=int)

        # Find the overlap 

        test = np.isin(extract.state['orders'], include)

        # Test to make sure they are orders you are allowed work with

        if np.sum(test) != np.size(include):
            message = 'A requested order does not exist.'
            raise ValueError(message)

    if exclude is not None:

        if isinstance(exclude, int) is True:
            exclude = np.array(exclude, dtype=int)

        if isinstance(exclude, list) is True:
            exclude = np.array(exclude, dtype=int)

        if isinstance(exclude, str):
            exclude = np.array(extract_filestring(exclude, 'index'), dtype=int)

        # Find the overlap 

        test = ~np.isin(extract.state['orders'], exclude)

        # Test to make sure they are orders you are allowed work with

        if np.sum(~test) != np.size(exclude):
            message = 'A requested order does not exist.'
            raise ValueError(message)

    if include_all is True:
        test = np.full(extract.state['norders'], True)

    #
    # Set the correct doorders variable
    #

    if extract.state['type'] == 'xs':

        extract.state['xsdoorders'] = test
        doorders = test

    else:

        extract.state['psdoorders'] = test
        doorders = test

    if qa_show is True:
        number = plot_profiles(extract.state['profiles'],
                               extract.state['slith_arc'],
                               doorders, apertures=extract.state['apertures'],
                               plot_number=extract.state['profiles_plotnum'],
                               plot_size=qa_showsize)
        extract.state['profiles_plotnum'] = number

    if qa_write is True:
        qafileinfo = {'figsize': (8.5, 11),
                      'filepath': setup.state['qa_path'],
                      'filename': extract.state['qafilename'] +
                                  '_aperturepositions',
                      'extension': setup.state['qa_extension']}

        plot_profiles(extract.state['profiles'], extract.state['slith_arc'],
                      doorders, apertures=extract.state['apertures'],
                      file_info=qafileinfo)

    #
    # Do the trace if the extraction is extended source
    #

    #    if extract.state['type'] == 'xs':
    #        trace_apertures(verbose=verbose, qa_show=qa_show, qa_write=qa_write)

    #
    # Set the done variable
    #

    extract.state['select_done'] = True
